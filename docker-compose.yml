version: "3.8"

volumes:
  rabbitmq_data:
  pgdata: 
  kongadata:

services:

   #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:2.0.4
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:2.0.4
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
    ports:
      - "8000:8000"
      - "8001:8001"
    hostname: kong
    container_name: kong
    user: root
    links:
      - browse
      - get_product_cart
      - give_rating
      - order
      - product
      - search
      - review
      - shipping
      - shop
      - user
  
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga
    restart: always
    networks:
        - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: password
      DB_DATABASE: konga_db
    depends_on:
      - kong
    ports:
      - "1337:1337"
    volumes:
      - kongadata:/app/kongadata
 
  ###################################
  # Order: The Order microservice
  ###################################
  order:
    build:
      context: ./order
      dockerfile: Dockerfile
    image: jrenaldi/order:syopi
    container_name: order1
    hostname: order1
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5001:5001"
    networks:
      - kong-net
 
  #######################################################
  # Product: The Product microservice
  #######################################################
  product:
    build:
      context: ./product
      dockerfile: Dockerfile
    image: jrenaldi/product:syopi
    container_name: product1
    hostname: product1
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5002:5002"
    networks:
      - kong-net
  
  #######################################################
  # Review: The Review microservice
  #######################################################
  review:
    build:
      context: ./review
      dockerfile: Dockerfile
    image: jrenaldi/review:syopi
    container_name: review1
    hostname: review1
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5003:5003"
    networks:
      - kong-net

  #######################################################
  # Shipping: The Shipping microservice
  #######################################################
  shipping:
    build:
      context: ./shipping
      dockerfile: Dockerfile
    image: jrenaldi/shipping:syopi
    container_name: shipping1
    hostname: shipping1
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5004:5004"
    networks:
      - kong-net

  #######################################################
  # Shop: The Shop microservice
  #######################################################
  shop:
    build:
      context: ./shop
      dockerfile: Dockerfile
    image: jrenaldi/shop:syopi
    container_name: shop1
    hostname: shop1
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5005:5005"
    networks:
      - kong-net

  #######################################################
  # User: The User microservice
  #######################################################
  user:
    build:
      context: ./user
      dockerfile: Dockerfile
    image: jrenaldi/user:syopi
    container_name: user1
    hostname: user1
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5006:5006"
    networks:
      - kong-net

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: syopi-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - kong-net
      
  #################################################
  # Order Log: The Order Log microservice
  #################################################
  order_log:
    build:
      context: ./order_log
      dockerfile: Dockerfile
    image: jrenaldi/order_log:syopi
    container_name: order_log1
    hostname: order_log1
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    networks:
      - kong-net

  ###################################
  # Error: The Error microservice
  ###################################
  error:
    build:
      context: ./error
      dockerfile: Dockerfile
    image: jrenaldi/error:syopi
    container_name: error1
    hostname: error1
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
    networks:
      - kong-net

  ###############################################
  # Browse: The Browse complex microservice
  ###############################################
  browse:
    build:
      context: ./browse
      dockerfile: Dockerfile
    image: jrenaldi/browse:syopi
    container_name: browse1
    hostname: browse1
    restart: always
    depends_on:
      - search
    environment:
      search_URL: http://search:5010/search
      PYTHONUNBUFFERED: 1 
    ports:
      - "5007:5007"
    networks:
      - kong-net

  ###############################################
  # Get Product Cart: The Get Product Cart complex microservice
  ###############################################
  get_product_cart:
    build:
      context: ./get_product_cart
      dockerfile: Dockerfile
    image: jrenaldi/get_product_cart:syopi
    container_name: get_product_cart1
    hostname: get_product_cart1
    restart: always
    depends_on:
      - user
      - product
      - shop
    environment:
      user_URL: http://user:5006/user
      product_URL: http://product:5002/product
      shop_URL: http://shop:5005/shop
      PYTHONUNBUFFERED: 1
    ports:
      - "5008:5008"
    networks:
      - kong-net

  ###############################################
  # Give Rating: Give Rating complex microservice
  ###############################################
  give_rating:
    build:
      context: ./give_rating
      dockerfile: Dockerfile
    image: jrenaldi/give_rating:syopi
    container_name: give_rating1
    hostname: give_rating1
    restart: always
    depends_on:
      - review
      - product
    environment:
      review_URL: http://review:5003/user
      product_URL: http://product:5002/product
      PYTHONUNBUFFERED: 1
    ports:
      - "5009:5009"
    networks:
      - kong-net


  ##################################
  # search: The search microservice
  ##################################
  search:
    build:
      context: ./search
      dockerfile: Dockerfile
    image: jrenaldi/search:syopi
    container_name: search1
    hostname: search1
    restart: always
    depends_on:
      - product
    environment:
      product_URL: http://product:5002/product
      PYTHONUNBUFFERED: 1
    ports:
      - "5010:5010"
    networks:
      - kong-net

networks:
  kong-net:
    driver: bridge
